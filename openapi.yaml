openapi: 3.0.3
info:
  title: Nexus-Commerce API
  version: 1.0.0
  description: E-commerce backend APIs for products, carts, orders, etc.
  contact:
    email: support@nexus-commerce.store
  license:
    name: BSD-3-Clause
paths:
  /api/v1/addresses/:
    get:
      operationId: addresses_list
      description: Returns addresses belonging to the authenticated user.
      summary: List my addresses
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Core: Addresses'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
              examples:
                Address:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 101
                      street: 12 Admiralty Way
                      city: Lekki
                      state: Lagos
                      country: NG
                      zip_code: '105102'
                      is_default_shipping: true
                  summary: Example shipping address
          description: ''
    post:
      operationId: addresses_create
      description: |-
        Address API.
        Users manage their own addresses; admins can access all.
      summary: Create an address
      tags:
      - 'Core: Addresses'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              Address:
                value:
                  id: 101
                  street: 12 Admiralty Way
                  city: Lekki
                  state: Lagos
                  country: NG
                  zip_code: '105102'
                  is_default_shipping: true
                summary: Example shipping address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address:
                  value:
                    id: 101
                    street: 12 Admiralty Way
                    city: Lekki
                    state: Lagos
                    country: NG
                    zip_code: '105102'
                    is_default_shipping: true
                  summary: Example shipping address
          description: ''
  /api/v1/addresses/{id}/:
    get:
      operationId: addresses_retrieve
      description: |-
        Address API.
        Users manage their own addresses; admins can access all.
      summary: Retrieve an address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - 'Core: Addresses'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address:
                  value:
                    id: 101
                    street: 12 Admiralty Way
                    city: Lekki
                    state: Lagos
                    country: NG
                    zip_code: '105102'
                    is_default_shipping: true
                  summary: Example shipping address
          description: ''
        '404':
          description: Not found
    put:
      operationId: addresses_update
      description: |-
        Address API.
        Users manage their own addresses; admins can access all.
      summary: Update an address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - 'Core: Addresses'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              Address:
                value:
                  id: 101
                  street: 12 Admiralty Way
                  city: Lekki
                  state: Lagos
                  country: NG
                  zip_code: '105102'
                  is_default_shipping: true
                summary: Example shipping address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address:
                  value:
                    id: 101
                    street: 12 Admiralty Way
                    city: Lekki
                    state: Lagos
                    country: NG
                    zip_code: '105102'
                    is_default_shipping: true
                  summary: Example shipping address
          description: ''
    patch:
      operationId: addresses_partial_update
      description: |-
        Address API.
        Users manage their own addresses; admins can access all.
      summary: Partially update an address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - 'Core: Addresses'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
            examples:
              Address:
                value:
                  id: 101
                  street: 12 Admiralty Way
                  city: Lekki
                  state: Lagos
                  country: NG
                  zip_code: '105102'
                  is_default_shipping: true
                summary: Example shipping address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address:
                  value:
                    id: 101
                    street: 12 Admiralty Way
                    city: Lekki
                    state: Lagos
                    country: NG
                    zip_code: '105102'
                    is_default_shipping: true
                  summary: Example shipping address
          description: ''
    delete:
      operationId: addresses_destroy
      description: |-
        Address API.
        Users manage their own addresses; admins can access all.
      summary: Delete an address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - 'Core: Addresses'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Deleted
  /api/v1/audit-logs/:
    get:
      operationId: audit_logs_list
      description: |-
        Returns audit logs.

        - **Admins** (is_staff/superuser/role=ADMIN): see all logs.
        - **Users**: see only logs related to their own actions/resources (adjust filter as needed).
      summary: List audit logs (scoped)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Core: Audit Logs'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogListList'
              examples:
                AuditLogList:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 555
                      user:
                        id: 1a2b3c4d-0000-1111-2222-333344445555
                        email: ops@example.com
                      action: ORDER_STATUS_UPDATED
                      created_at: '2025-08-13T11:20:01Z'
                  summary: Audit entry (list view)
          description: ''
  /api/v1/audit-logs/{id}/:
    get:
      operationId: audit_logs_retrieve
      description: |-
        Read-only Audit Log API.
        Intended for observability and compliance surfaces. Mutations are disabled.
      summary: Retrieve an audit log entry
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this audit log.
        required: true
      tags:
      - 'Core: Audit Logs'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogDetail'
              examples:
                AuditLogDetail:
                  value:
                    id: 555
                    user:
                      id: 1a2b3c4d-0000-1111-2222-333344445555
                      email: ops@example.com
                    action: ORDER_STATUS_UPDATED
                    created_at: '2025-08-13T11:20:01Z'
                    details:
                      order_id: 42
                      from: pending
                      to: shipped
                      reason: Warehouse dispatch
                  summary: Audit entry (detail view)
          description: ''
        '404':
          description: Not found
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Obtain JWT access/refresh tokens, augmented with user profile & roles.

        Request:
            email (str), password (str)

        Response:
            access (str), refresh (str), user_id (int), email (str),
            username (str), roles (list[str])
      summary: Login (JWT obtain)
      tags:
      - 'Auth: JWT'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
            examples:
              LoginExample:
                value:
                  email: user@example.com
                  password: P@ssw0rd!
                summary: Login example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPairResponse'
          description: ''
  /api/v1/auth/register/:
    post:
      operationId: auth_register_create
      description: |-
        Public user registration with safe role fallback.

        - If `role_type` is not allowed, it falls back to 'customer'.
        - Returns created user + JWT tokens for immediate auth.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/cart-items/:
    get:
      operationId: cart_items_list
      description: Items within the caller's cart(s).
      summary: List my cart items
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: cart_items_create
      description: Add a product variant to the caller's cart. Fails if the item already
        exists.
      summary: Add item to my cart
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '403':
          description: Duplicate item
  /api/v1/cart-items/{id}/:
    get:
      operationId: cart_items_retrieve
      description: |-
        Cart Items API.
        Only the owner of the cart may interact with its items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Retrieve a cart item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '404':
          description: Not found
    put:
      operationId: cart_items_update
      description: |-
        Cart Items API.
        Only the owner of the cart may interact with its items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Update a cart item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    patch:
      operationId: cart_items_partial_update
      description: |-
        Cart Items API.
        Only the owner of the cart may interact with its items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Partially update a cart item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    delete:
      operationId: cart_items_destroy
      description: |-
        Cart Items API.
        Only the owner of the cart may interact with its items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Remove item from my cart
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Deleted
  /api/v1/carts/:
    get:
      operationId: carts_list
      description: Returns the caller's cart. System enforces one cart per user.
      summary: Get my cart (singleton)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartList'
          description: ''
    post:
      operationId: carts_create
      description: Create a cart for the caller. Fails if a cart already exists.
      summary: Create my cart
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '403':
          description: Already exists
  /api/v1/carts/{id}/:
    get:
      operationId: carts_retrieve
      description: |-
        Cart API.
        Singleton per user; auto-linked to the requesting user on create.
      summary: Retrieve a cart
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - Cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          description: Not found
    put:
      operationId: carts_update
      description: |-
        Cart API.
        Singleton per user; auto-linked to the requesting user on create.
      summary: Update my cart
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: carts_partial_update
      description: |-
        Cart API.
        Singleton per user; auto-linked to the requesting user on create.
      summary: Partially update my cart
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: carts_destroy
      description: |-
        Cart API.
        Singleton per user; auto-linked to the requesting user on create.
      summary: Delete my cart
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - Cart
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Deleted
  /api/v1/categories/:
    get:
      operationId: categories_list
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: List categories
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Products: Categories'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: categories_create
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: Create category
      tags:
      - 'Products: Categories'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/categories/{id}/:
    get:
      operationId: categories_retrieve
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: Get a category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - 'Products: Categories'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: categories_update
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: Replace category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - 'Products: Categories'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: categories_partial_update
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: Update category (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - 'Products: Categories'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: categories_destroy
      description: |-
        Categories catalog.

        Permissions:
          - GET/list/retrieve: public.
          - POST/PUT/PATCH/DELETE: Authenticated + privileged role required.
      summary: Delete category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - 'Products: Categories'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Category deleted
  /api/v1/media/:
    get:
      operationId: media_list
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: List product media
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Products: Media'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductMediaList'
          description: ''
    post:
      operationId: media_create
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: Create product media
      tags:
      - 'Products: Media'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
  /api/v1/media/{id}/:
    get:
      operationId: media_retrieve
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: Get a product media item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - 'Products: Media'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    put:
      operationId: media_update
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: Replace product media
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - 'Products: Media'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    patch:
      operationId: media_partial_update
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: Update product media (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - 'Products: Media'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    delete:
      operationId: media_destroy
      description: |-
        Media assets attached to products.

        Public reads; admin writes.
      summary: Delete product media
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - 'Products: Media'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Media deleted
  /api/v1/notifications/:
    get:
      operationId: notifications_list
      description: |-
        Returns notifications visible to the caller.

        - **Users** see only their own notifications.
        - **Admins** (is_staff/superuser/role=ADMIN) see all notifications.
      summary: List my notifications (admins see all)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
              examples:
                Notification:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 123
                      user:
                        id: 9c1c2d3e-1111-2222-3333-444455556666
                        email: user@example.com
                      type: order_update
                      message: Your order ORD-2025-000123 has shipped.
                      is_read: false
                      created_at: '2025-08-13T11:45:12Z'
                  summary: Example notification payload
          description: ''
  /api/v1/notifications/{id}/:
    get:
      operationId: notifications_retrieve
      description: Notifications API.
      summary: Retrieve a notification
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
              examples:
                Notification:
                  value:
                    id: 123
                    user:
                      id: 9c1c2d3e-1111-2222-3333-444455556666
                      email: user@example.com
                    type: order_update
                    message: Your order ORD-2025-000123 has shipped.
                    is_read: false
                    created_at: '2025-08-13T11:45:12Z'
                  summary: Example notification payload
          description: ''
        '404':
          description: Not found
  /api/v1/notifications/{id}/mark_read/:
    post:
      operationId: notifications_mark_read_create
      description: Notifications API.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
            examples:
              Notification:
                value:
                  id: 123
                  user:
                    id: 9c1c2d3e-1111-2222-3333-444455556666
                    email: user@example.com
                  type: order_update
                  message: Your order ORD-2025-000123 has shipped.
                  is_read: false
                  created_at: '2025-08-13T11:45:12Z'
                summary: Example notification payload
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
              examples:
                Notification:
                  value:
                    id: 123
                    user:
                      id: 9c1c2d3e-1111-2222-3333-444455556666
                      email: user@example.com
                    type: order_update
                    message: Your order ORD-2025-000123 has shipped.
                    is_read: false
                    created_at: '2025-08-13T11:45:12Z'
                  summary: Example notification payload
          description: ''
  /api/v1/notifications/mark_all_read/:
    post:
      operationId: notifications_mark_all_read_create
      description: Notifications API.
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
            examples:
              Notification:
                value:
                  id: 123
                  user:
                    id: 9c1c2d3e-1111-2222-3333-444455556666
                    email: user@example.com
                  type: order_update
                  message: Your order ORD-2025-000123 has shipped.
                  is_read: false
                  created_at: '2025-08-13T11:45:12Z'
                summary: Example notification payload
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
              examples:
                Notification:
                  value:
                    id: 123
                    user:
                      id: 9c1c2d3e-1111-2222-3333-444455556666
                      email: user@example.com
                    type: order_update
                    message: Your order ORD-2025-000123 has shipped.
                    is_read: false
                    created_at: '2025-08-13T11:45:12Z'
                  summary: Example notification payload
          description: ''
  /api/v1/order-items/:
    get:
      operationId: order_items_list
      description: Returns order items that belong to the caller's orders.
      summary: List my order items
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Order Items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemList'
              examples:
                OrderItem:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 101
                      product_variant:
                        id: 501
                        name: T-Shirt – Large – Blue
                        price: '19.99'
                        sku: TSHIRT-L-BLU
                      quantity: 2
                      price_at_order: '19.99'
                  summary: Example order item (read)
          description: ''
    post:
      operationId: order_items_create
      description: Create an item under an owned order if your policy allows modifying
        items directly.
      summary: Create an order item
      tags:
      - Order Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
            examples:
              OrderItem:
                value:
                  id: 101
                  product_variant:
                    id: 501
                    name: T-Shirt – Large – Blue
                    price: '19.99'
                    sku: TSHIRT-L-BLU
                  quantity: 2
                  price_at_order: '19.99'
                summary: Example order item (read)
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                OrderItem:
                  value:
                    id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                  summary: Example order item (read)
          description: ''
        '400':
          description: Validation error
  /api/v1/order-items/{id}/:
    get:
      operationId: order_items_retrieve
      description: |-
        Order Items API.
        Only the owner of the parent order can manage items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Retrieve an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - Order Items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                OrderItem:
                  value:
                    id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                  summary: Example order item (read)
          description: ''
        '404':
          description: Not found
    put:
      operationId: order_items_update
      description: |-
        Order Items API.
        Only the owner of the parent order can manage items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Update an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
            examples:
              OrderItem:
                value:
                  id: 101
                  product_variant:
                    id: 501
                    name: T-Shirt – Large – Blue
                    price: '19.99'
                    sku: TSHIRT-L-BLU
                  quantity: 2
                  price_at_order: '19.99'
                summary: Example order item (read)
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                OrderItem:
                  value:
                    id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                  summary: Example order item (read)
          description: ''
        '400':
          description: Validation error
    patch:
      operationId: order_items_partial_update
      description: |-
        Order Items API.
        Only the owner of the parent order can manage items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Partially update an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
            examples:
              OrderItem:
                value:
                  id: 101
                  product_variant:
                    id: 501
                    name: T-Shirt – Large – Blue
                    price: '19.99'
                    sku: TSHIRT-L-BLU
                  quantity: 2
                  price_at_order: '19.99'
                summary: Example order item (read)
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                OrderItem:
                  value:
                    id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                  summary: Example order item (read)
          description: ''
    delete:
      operationId: order_items_destroy
      description: |-
        Order Items API.
        Only the owner of the parent order can manage items (enforced by `IsOwnerOrAdmin` and queryset filter).
      summary: Delete an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - Order Items
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Deleted
  /api/v1/orders/:
    get:
      operationId: orders_list
      description: |
        Returns orders visible to the caller.

        - **Customers**: only their own orders
        - **Admins/Warehouse (via permissions)**: all orders
      summary: List my orders (admins see all)
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
              examples:
                Order:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 42
                      user:
                        id: uuid-1234
                        email: john@example.com
                      status: pending
                      total_amount: '39.98'
                      shipping_address: John Doe, 123 Main St, Lagos
                      payment: TXN-2025-0001
                      created_at: '2025-08-13T10:00:00Z'
                      updated_at: '2025-08-13T10:10:00Z'
                      items:
                      - id: 101
                        product_variant:
                          id: 501
                          name: T-Shirt – Large – Blue
                          price: '19.99'
                          sku: TSHIRT-L-BLU
                        quantity: 2
                        price_at_order: '19.99'
                  summary: Example order with items
          description: ''
    post:
      operationId: orders_create
      description: |-
        Create a new order for the authenticated **customer**.

        Business rules:
        1) Only users with role `CUSTOMER` can create orders.
        2) At least one item is required.
        3) Stock is verified and decremented atomically.
      summary: Create an order
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
            examples:
              OrderCreate:
                value:
                  shipping_address: 301
                  items:
                  - product_variant: 501
                    quantity: 2
                  total_amount: '39.98'
                summary: Request to create an order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Order:
                  value:
                    id: 42
                    user:
                      id: uuid-1234
                      email: john@example.com
                    status: pending
                    total_amount: '39.98'
                    shipping_address: John Doe, 123 Main St, Lagos
                    payment: TXN-2025-0001
                    created_at: '2025-08-13T10:00:00Z'
                    updated_at: '2025-08-13T10:10:00Z'
                    items:
                    - id: 101
                      product_variant:
                        id: 501
                        name: T-Shirt – Large – Blue
                        price: '19.99'
                        sku: TSHIRT-L-BLU
                      quantity: 2
                      price_at_order: '19.99'
                  summary: Example order with items
          description: ''
        '400':
          description: Validation error
  /api/v1/orders/{id}/:
    get:
      operationId: orders_retrieve
      description: Orders API.
      summary: Retrieve an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Order:
                  value:
                    id: 42
                    user:
                      id: uuid-1234
                      email: john@example.com
                    status: pending
                    total_amount: '39.98'
                    shipping_address: John Doe, 123 Main St, Lagos
                    payment: TXN-2025-0001
                    created_at: '2025-08-13T10:00:00Z'
                    updated_at: '2025-08-13T10:10:00Z'
                    items:
                    - id: 101
                      product_variant:
                        id: 501
                        name: T-Shirt – Large – Blue
                        price: '19.99'
                        sku: TSHIRT-L-BLU
                      quantity: 2
                      price_at_order: '19.99'
                  summary: Example order with items
          description: ''
        '404':
          description: Not found
    put:
      operationId: orders_update
      description: Status/administrative updates typically restricted to Admin/Warehouse.
      summary: Update an order (restricted)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              Order:
                value:
                  id: 42
                  user:
                    id: uuid-1234
                    email: john@example.com
                  status: pending
                  total_amount: '39.98'
                  shipping_address: John Doe, 123 Main St, Lagos
                  payment: TXN-2025-0001
                  created_at: '2025-08-13T10:00:00Z'
                  updated_at: '2025-08-13T10:10:00Z'
                  items:
                  - id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                summary: Example order with items
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Order:
                  value:
                    id: 42
                    user:
                      id: uuid-1234
                      email: john@example.com
                    status: pending
                    total_amount: '39.98'
                    shipping_address: John Doe, 123 Main St, Lagos
                    payment: TXN-2025-0001
                    created_at: '2025-08-13T10:00:00Z'
                    updated_at: '2025-08-13T10:10:00Z'
                    items:
                    - id: 101
                      product_variant:
                        id: 501
                        name: T-Shirt – Large – Blue
                        price: '19.99'
                        sku: TSHIRT-L-BLU
                      quantity: 2
                      price_at_order: '19.99'
                  summary: Example order with items
          description: ''
        '400':
          description: Validation error
    patch:
      operationId: orders_partial_update
      description: Patch specific fields (e.g., status) if permitted.
      summary: Partially update an order (restricted)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
            examples:
              Order:
                value:
                  id: 42
                  user:
                    id: uuid-1234
                    email: john@example.com
                  status: pending
                  total_amount: '39.98'
                  shipping_address: John Doe, 123 Main St, Lagos
                  payment: TXN-2025-0001
                  created_at: '2025-08-13T10:00:00Z'
                  updated_at: '2025-08-13T10:10:00Z'
                  items:
                  - id: 101
                    product_variant:
                      id: 501
                      name: T-Shirt – Large – Blue
                      price: '19.99'
                      sku: TSHIRT-L-BLU
                    quantity: 2
                    price_at_order: '19.99'
                summary: Example order with items
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Order:
                  value:
                    id: 42
                    user:
                      id: uuid-1234
                      email: john@example.com
                    status: pending
                    total_amount: '39.98'
                    shipping_address: John Doe, 123 Main St, Lagos
                    payment: TXN-2025-0001
                    created_at: '2025-08-13T10:00:00Z'
                    updated_at: '2025-08-13T10:10:00Z'
                    items:
                    - id: 101
                      product_variant:
                        id: 501
                        name: T-Shirt – Large – Blue
                        price: '19.99'
                        sku: TSHIRT-L-BLU
                      quantity: 2
                      price_at_order: '19.99'
                  summary: Example order with items
          description: ''
        '400':
          description: Validation error
    delete:
      operationId: orders_destroy
      description: Dangerous operation; keep for admin/testing only if your policy
        allows it.
      summary: Delete an order (typically disallowed)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Deleted
        '403':
          description: Forbidden
  /api/v1/payments/:
    get:
      operationId: payments_list
      description: |-
        Return payments visible to the caller.

        - **Users** see only their own payments.
        - **Admins** (is_staff/superuser/role=ADMIN) see all payments.
      summary: List payments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentList'
              examples:
                Payment(successfulCardPaymentWithOneRefund):
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                      user:
                        id: 1c2f3a44-e1cd-4c0c-bb33-9a77a778c0a1
                        email: jane@example.com
                      amount: '15000.00'
                      status: success
                      payment_method: card
                      transaction_id: PSP-TXN-2025-000123
                      created_at: '2025-08-13T10:20:30Z'
                      updated_at: '2025-08-13T10:21:05Z'
                      refunds:
                      - id: a1b2c3d4-22aa-44bb-99ff-3a3a3a3a3a3a
                        payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                        amount: '5000.00'
                        status: pending
                        created_at: '2025-08-13T10:21:05Z'
                  summary: Example Payment payload
          description: ''
  /api/v1/payments/{id}/:
    get:
      operationId: payments_retrieve
      description: Get a single payment by ID.
      summary: Retrieve a payment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payment.
        required: true
      tags:
      - Payments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
              examples:
                Payment(successfulCardPaymentWithOneRefund):
                  value:
                    id: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                    user:
                      id: 1c2f3a44-e1cd-4c0c-bb33-9a77a778c0a1
                      email: jane@example.com
                    amount: '15000.00'
                    status: success
                    payment_method: card
                    transaction_id: PSP-TXN-2025-000123
                    created_at: '2025-08-13T10:20:30Z'
                    updated_at: '2025-08-13T10:21:05Z'
                    refunds:
                    - id: a1b2c3d4-22aa-44bb-99ff-3a3a3a3a3a3a
                      payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                      amount: '5000.00'
                      status: pending
                      created_at: '2025-08-13T10:21:05Z'
                  summary: Example Payment payload
          description: ''
        '404':
          description: Not found
  /api/v1/products/:
    get:
      operationId: products_list
      description: |-
        Paginated list of products. Supports search, filtering, and ordering.

        **Filters**: `category`, `price__gte`, `price__lte`, `is_active`
        **Search**: `search` across `name`, `description`
        **Ordering**: `ordering` by `price`, `name`, `created_at` (prefix with `-` for desc)
      summary: List products
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: ordering
        schema:
          type: string
        description: e.g. `-created_at,price`
      - in: query
        name: page
        schema:
          type: integer
        description: 1-based page index.
      - in: query
        name: page_size
        schema:
          type: integer
        description: Items per page (max 50).
      - in: query
        name: price__gte
        schema:
          type: string
      - in: query
        name: price__lte
        schema:
          type: string
      - in: query
        name: search
        schema:
          type: string
      tags:
      - Products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: products_create
      description: |-
        Products catalog with nested variants, media, and lightweight reviews.

        Public reads; privileged writes.
      summary: Create product
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/{id}/:
    get:
      operationId: products_retrieve
      description: |-
        Products catalog with nested variants, media, and lightweight reviews.

        Public reads; privileged writes.
      summary: Get a product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - Products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_update
      description: |-
        Products catalog with nested variants, media, and lightweight reviews.

        Public reads; privileged writes.
      summary: Replace product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_partial_update
      description: |-
        Products catalog with nested variants, media, and lightweight reviews.

        Public reads; privileged writes.
      summary: Update product (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      description: |-
        Products catalog with nested variants, media, and lightweight reviews.

        Public reads; privileged writes.
      summary: Delete product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - Products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Product deleted
  /api/v1/refunds/:
    get:
      operationId: refunds_list
      description: |-
        Return refunds visible to the caller.

        - **Users** see only refunds for their own payments.
        - **Admins** (is_staff/superuser/role=ADMIN) see all refunds.
      summary: List refunds
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Refunds
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRefundList'
              examples:
                Refund:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: a1b2c3d4-22aa-44bb-99ff-3a3a3a3a3a3a
                      payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                      amount: '5000.00'
                      status: pending
                      created_at: '2025-08-13T10:21:05Z'
                  summary: Example Refund payload
          description: ''
    post:
      operationId: refunds_create
      description: |-
        Create a refund for a **successful** payment.

        Business rules enforced:
        1) Caller must be authenticated.
        2) Non-admins can only refund their own payments.
        3) Payment must be in `success` state.
        4) Prevents over-refund beyond original amount.
      summary: Create a refund
      tags:
      - Refunds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundCreate'
            examples:
              RefundCreate:
                value:
                  payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                  amount: '5000.00'
                summary: Request to create a refund
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
              examples:
                Refund:
                  value:
                    id: a1b2c3d4-22aa-44bb-99ff-3a3a3a3a3a3a
                    payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                    amount: '5000.00'
                    status: pending
                    created_at: '2025-08-13T10:21:05Z'
                  summary: Example Refund payload
          description: Refund created
        '400':
          description: Validation error
        '401':
          description: Authentication required
        '403':
          description: Forbidden
  /api/v1/refunds/{id}/:
    get:
      operationId: refunds_retrieve
      description: |-
        Refund API.

        Create path enforces the payment status and ownership rules in the serializer.
        List/Retrieve follow ownership rules similar to payments. Update/Delete are
        excluded by default (typical fintech policy).
      summary: Retrieve a refund
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this refund.
        required: true
      tags:
      - Refunds
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
              examples:
                Refund:
                  value:
                    id: a1b2c3d4-22aa-44bb-99ff-3a3a3a3a3a3a
                    payment: 7f6f7ab6-3e0f-4f4e-8d2b-12a123456789
                    amount: '5000.00'
                    status: pending
                    created_at: '2025-08-13T10:21:05Z'
                  summary: Example Refund payload
          description: ''
        '404':
          description: Not found
  /api/v1/reviews/:
    get:
      operationId: reviews_list
      description: Small-page pagination (max 10 per page).
      summary: List product reviews
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: 1-based page index.
      - in: query
        name: page_size
        schema:
          type: integer
        description: Items per page (max 10).
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Products: Reviews'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: reviews_create
      description: |-
        Customer reviews. Auth required to create/update/delete; anyone can read.

        Pagination:
          SmallResultsSetPagination (page/page_size up to 10).
      summary: Create a review
      tags:
      - 'Products: Reviews'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/reviews/{id}/:
    get:
      operationId: reviews_retrieve
      description: |-
        Customer reviews. Auth required to create/update/delete; anyone can read.

        Pagination:
          SmallResultsSetPagination (page/page_size up to 10).
      summary: Get a review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - 'Products: Reviews'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: reviews_update
      description: |-
        Customer reviews. Auth required to create/update/delete; anyone can read.

        Pagination:
          SmallResultsSetPagination (page/page_size up to 10).
      summary: Replace a review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - 'Products: Reviews'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: reviews_partial_update
      description: |-
        Customer reviews. Auth required to create/update/delete; anyone can read.

        Pagination:
          SmallResultsSetPagination (page/page_size up to 10).
      summary: Update a review (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - 'Products: Reviews'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: reviews_destroy
      description: |-
        Customer reviews. Auth required to create/update/delete; anyone can read.

        Pagination:
          SmallResultsSetPagination (page/page_size up to 10).
      summary: Delete a review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - 'Products: Reviews'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Review deleted
  /api/v1/roles/:
    get:
      operationId: roles_list
      description: Returns all available roles.
      summary: List roles
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Auth: Roles'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleList'
          description: ''
    post:
      operationId: roles_create
      description: |-
        Manage system roles (admin-only).

        Permissions:
            - Authenticated + Admin role required for all actions.
      summary: Create role
      tags:
      - 'Auth: Roles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
  /api/v1/roles/{id}/:
    get:
      operationId: roles_retrieve
      description: |-
        Manage system roles (admin-only).

        Permissions:
            - Authenticated + Admin role required for all actions.
      summary: Get a role
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - 'Auth: Roles'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    put:
      operationId: roles_update
      description: |-
        Manage system roles (admin-only).

        Permissions:
            - Authenticated + Admin role required for all actions.
      summary: Replace role
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - 'Auth: Roles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    patch:
      operationId: roles_partial_update
      description: |-
        Manage system roles (admin-only).

        Permissions:
            - Authenticated + Admin role required for all actions.
      summary: Update role (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - 'Auth: Roles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    delete:
      operationId: roles_destroy
      description: |-
        Manage system roles (admin-only).

        Permissions:
            - Authenticated + Admin role required for all actions.
      summary: Delete role
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - 'Auth: Roles'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Role deleted
  /api/v1/user-roles/:
    get:
      operationId: user_roles_list
      description: Manage assignments between users and roles (admin-only).
      summary: List user-role assignments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Auth: UserRoles'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: user_roles_create
      description: Manage assignments between users and roles (admin-only).
      summary: Assign role to user
      tags:
      - 'Auth: UserRoles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/v1/user-roles/{id}/:
    get:
      operationId: user_roles_retrieve
      description: Manage assignments between users and roles (admin-only).
      summary: Get a user-role assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - 'Auth: UserRoles'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: user_roles_update
      description: Manage assignments between users and roles (admin-only).
      summary: Replace user-role assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - 'Auth: UserRoles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    patch:
      operationId: user_roles_partial_update
      description: Manage assignments between users and roles (admin-only).
      summary: Update user-role assignment (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - 'Auth: UserRoles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: user_roles_destroy
      description: Manage assignments between users and roles (admin-only).
      summary: Delete user-role assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - 'Auth: UserRoles'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Assignment deleted
  /api/v1/users/:
    get:
      operationId: users_list
      description: Paginated list of users. Admin-only.
      summary: List users
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: 1-based page index.
      - in: query
        name: page_size
        schema:
          type: integer
        description: Items per page (max 50).
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Auth: Users'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      description: Admin-only user creation.
      summary: Create user
      tags:
      - 'Auth: Users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: users_retrieve
      description: Retrieve a user. Allowed for self or admin.
      summary: Get a user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - 'Auth: Users'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: Update all fields. Allowed for self or admin.
      summary: Replace user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - 'Auth: Users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: Partial update. Allowed for self or admin.
      summary: Update user (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - 'Auth: Users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: Admin-only.
      summary: Delete user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - 'Auth: Users'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: User deleted
  /api/v1/variants/:
    get:
      operationId: variants_list
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: List product variants
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Products: Variants'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductVariantList'
          description: ''
    post:
      operationId: variants_create
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: Create product variant
      tags:
      - 'Products: Variants'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/{id}/:
    get:
      operationId: variants_retrieve
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: Get a product variant
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - 'Products: Variants'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    put:
      operationId: variants_update
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: Replace product variant
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - 'Products: Variants'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    patch:
      operationId: variants_partial_update
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: Update product variant (partial)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - 'Products: Variants'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    delete:
      operationId: variants_destroy
      description: |-
        Variants belonging to products.

        Public reads; admin writes.
      summary: Delete product variant
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - 'Products: Variants'
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Variant deleted
  /api/v1/vendors/:
    get:
      operationId: vendors_list
      description: Returns a small, paginated list of vendor users (admin-only).
      summary: List vendors
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: page_size
        schema:
          type: integer
        description: Items per page (max 10).
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - 'Auth: Users'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    Address:
      type: object
      description: |-
        Shipping/billing address.

        Notes
        -----
        - `is_default_shipping` can be used by clients to mark preferred shipping address.
        - If you enforce one default per user, do that in the view/serializer logic.
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        zip_code:
          type: string
          maxLength: 20
        is_default_shipping:
          type: boolean
      required:
      - city
      - country
      - id
      - state
      - street
      - zip_code
    AuditLogDetail:
      type: object
      description: Detailed audit log representation including structured `details`.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        action:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        details: {}
      required:
      - action
      - created_at
      - id
      - user
    AuditLogList:
      type: object
      description: Lightweight audit log representation for list endpoints.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        action:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - created_at
      - id
      - user
    Cart:
      type: object
      description: Read-only representation of a user's shopping cart.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
      required:
      - created_at
      - id
      - items
      - updated_at
      - user
    CartItem:
      type: object
      description: Read-only representation of an item in a cart.
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
      required:
      - id
      - product_variant
      - quantity
    Category:
      type: object
      description: |-
        Category model projection.

        Fields:
            id (int): PK.
            name (str): Category name.
            parent (int|null): Parent category ID (nullable).
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        parent:
          type: integer
          nullable: true
      required:
      - id
      - name
    CustomTokenObtainPair:
      type: object
      description: |-
        JWT token obtain serializer that augments the default payload.

        Extends:
            - `access` (str): JWT access token.
            - `refresh` (str): JWT refresh token.
            - `user_id` (int)
            - `email` (str)
            - `username` (str)
            - `roles` (List[str])

        Usage:
            Bind to your login view so clients receive role info alongside tokens.
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    MediaTypeEnum:
      enum:
      - image
      - video
      type: string
      description: |-
        * `image` - Image
        * `video` - Video
    Notification:
      type: object
      description: |-
        Read-only representation of a user notification.

        Fields
        ------
        - user: denormalized minimal user info (read-only)
        - is_read: clients typically toggle via a dedicated endpoint, not generic update
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - message
      - type
      - user
    Order:
      type: object
      description: Read-only representation of an order, including items, user, and
        linked payment.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        shipping_address:
          type: string
          readOnly: true
        payment:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
      required:
      - created_at
      - id
      - items
      - payment
      - shipping_address
      - total_amount
      - updated_at
      - user
    OrderCreate:
      type: object
      description: Write serializer for creating an order with one or more items.
      properties:
        shipping_address:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - items
      - shipping_address
      - total_amount
    OrderItem:
      type: object
      description: Read-only representation of an item in an order.
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
        price_at_order:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - id
      - price_at_order
      - product_variant
      - quantity
    OrderItemCreate:
      type: object
      description: Write serializer for adding an item to an order.
      properties:
        product_variant:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - product_variant
      - quantity
    OrderStatusEnum:
      enum:
      - pending
      - processing
      - shipped
      - delivered
      type: string
      description: |-
        * `pending` - Pending
        * `processing` - Processing
        * `shipped` - Shipped
        * `delivered` - Delivered
    PaginatedAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    PaginatedAuditLogListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogList'
    PaginatedCartItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCartList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Cart'
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedOrderItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedPaymentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedProductMediaList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
    PaginatedProductReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedProductVariantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
    PaginatedRefundList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
    PaginatedRoleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedUserRoleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    PatchedAddress:
      type: object
      description: |-
        Shipping/billing address.

        Notes
        -----
        - `is_default_shipping` can be used by clients to mark preferred shipping address.
        - If you enforce one default per user, do that in the view/serializer logic.
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        zip_code:
          type: string
          maxLength: 20
        is_default_shipping:
          type: boolean
    PatchedCart:
      type: object
      description: Read-only representation of a user's shopping cart.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
    PatchedCartItem:
      type: object
      description: Read-only representation of an item in a cart.
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
    PatchedCategory:
      type: object
      description: |-
        Category model projection.

        Fields:
            id (int): PK.
            name (str): Category name.
            parent (int|null): Parent category ID (nullable).
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        parent:
          type: integer
          nullable: true
    PatchedOrder:
      type: object
      description: Read-only representation of an order, including items, user, and
        linked payment.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        shipping_address:
          type: string
          readOnly: true
        payment:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
    PatchedOrderItem:
      type: object
      description: Read-only representation of an item in an order.
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
        price_at_order:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
    PatchedProduct:
      type: object
      description: |-
        Product with nested category, variants, media, and reviews.

        Write:
            - Provide `category_id` to set the category.

        Read:
            - `category` (nested), `variants` (nested), `media` (nested), `reviews` (nested).

        Notes:
            - Decimal fields are serialized as strings.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sku:
          type: string
          maxLength: 100
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        category_id:
          type: integer
          writeOnly: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
          readOnly: true
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
          readOnly: true
    PatchedProductMedia:
      type: object
      description: |-
        Media attached to a product.

        Fields:
            id (int): PK.
            url (str): Public media URL.
            media_type (str): Media kind, e.g. 'image', 'video'.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
        media_type:
          $ref: '#/components/schemas/MediaTypeEnum'
    PatchedProductReview:
      type: object
      description: |-
        Review authored by a user for a product.

        Create:
            - `user` is taken from request context; do not supply in payload.

        Fields:
            id (int)
            user (int, read-only): auto-filled from request.
            user_email (str, read-only)
            product (int)
            product_name (str, read-only)
            rating (int)
            comment (str)
            created_at (datetime, read-only)
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        product:
          type: integer
        product_name:
          type: string
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProductVariant:
      type: object
      description: |-
        Variant for a product (e.g., size/color SKU).

        Fields:
            id (int): PK.
            name (str): Variant name.
            stock_quantity (int): Inventory count.
            price_override (str|null): Override price (decimal-as-string), optional.
            sku (str): Variant SKU.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        stock_quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_override:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        sku:
          type: string
          maxLength: 100
    PatchedRole:
      type: object
      description: |-
        Serializer for the Role model.

        Fields:
            id (int): Primary key.
            name (str): Role name (e.g., 'admin', 'staff', 'customer').
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
    PatchedUser:
      type: object
      description: |-
        Full user serializer for create/retrieve/update operations.

        Notes:
            - `password` is write-only and validated via Django's password hashers on save.
            - `roles` is read-only (derived from the related roles for the user).
            - `id` is read-only.

        Create:
            Expects: email, username, first_name, last_name, password
            Behavior: sets hashed password before saving.

        Update:
            Optional: password. If provided, it is re-hashed and saved.

        Security:
            Do NOT echo plaintext passwords in logs or responses.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          readOnly: true
        password:
          type: string
          writeOnly: true
    PatchedUserRole:
      type: object
      description: |-
        Serializer for the UserRole mapping model.

        Fields:
            id (int): Primary key of the mapping row.
            user (int): Foreign key to User (primary key value).
            role (Role): Nested role object.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        role:
          $ref: '#/components/schemas/Role'
    Payment:
      type: object
      description: |-
        Read-only representation of a Payment with nested minimal user info and refunds.

        Fields
        ------
        - user: denormalized minimal user (id/email) for convenience in clients
        - refunds: all refunds associated with this payment
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        payment_method:
          type: string
          readOnly: true
        transaction_id:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - payment_method
      - refunds
      - status
      - transaction_id
      - updated_at
      - user
    PaymentStatusEnum:
      enum:
      - pending
      - success
      - failed
      - refunded
      type: string
      description: |-
        * `pending` - Pending
        * `success` - Success
        * `failed` - Failed
        * `refunded` - Refunded
    Product:
      type: object
      description: |-
        Product with nested category, variants, media, and reviews.

        Write:
            - Provide `category_id` to set the category.

        Read:
            - `category` (nested), `variants` (nested), `media` (nested), `reviews` (nested).

        Notes:
            - Decimal fields are serialized as strings.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sku:
          type: string
          maxLength: 100
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        category_id:
          type: integer
          writeOnly: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
          readOnly: true
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
          readOnly: true
      required:
      - category
      - category_id
      - created_at
      - description
      - id
      - media
      - name
      - price
      - reviews
      - sku
      - updated_at
      - variants
    ProductMedia:
      type: object
      description: |-
        Media attached to a product.

        Fields:
            id (int): PK.
            url (str): Public media URL.
            media_type (str): Media kind, e.g. 'image', 'video'.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
        media_type:
          $ref: '#/components/schemas/MediaTypeEnum'
      required:
      - id
      - media_type
      - url
    ProductReview:
      type: object
      description: |-
        Review authored by a user for a product.

        Create:
            - `user` is taken from request context; do not supply in payload.

        Fields:
            id (int)
            user (int, read-only): auto-filled from request.
            user_email (str, read-only)
            product (int)
            product_name (str, read-only)
            rating (int)
            comment (str)
            created_at (datetime, read-only)
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        product:
          type: integer
        product_name:
          type: string
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - id
      - product
      - product_name
      - rating
      - user
      - user_email
    ProductVariant:
      type: object
      description: |-
        Variant for a product (e.g., size/color SKU).

        Fields:
            id (int): PK.
            name (str): Variant name.
            stock_quantity (int): Inventory count.
            price_override (str|null): Override price (decimal-as-string), optional.
            sku (str): Variant SKU.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        stock_quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_override:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        sku:
          type: string
          maxLength: 100
      required:
      - id
      - name
      - sku
      - stock_quantity
    Refund:
      type: object
      description: |-
        Read-only representation of a refund tied to a payment.

        Notes
        -----
        - `status` is system-managed (e.g., `pending`, `approved`, `failed`, `rejected`).
        - `payment` is the UUID of the related Payment.
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - payment
      - status
    RefundCreate:
      type: object
      description: |-
        Create serializer for Refunds.

        Business Rules Enforced
        -----------------------
        1) Authentication must be present.
        2) Non-admin users can only refund their own payments.
        3) Payment must be in `success` state.
        4) Prevent over-refunds: sum(existing) + requested <= payment.amount.
      properties:
        payment:
          type: integer
          description: UUID of the Payment being refunded.
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - amount
      - payment
    Role:
      type: object
      description: |-
        Serializer for the Role model.

        Fields:
            id (int): Primary key.
            name (str): Role name (e.g., 'admin', 'staff', 'customer').
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - id
      - name
    TokenPairResponse:
      type: object
      description: Response body for JWT obtain.
      properties:
        access:
          type: string
        refresh:
          type: string
        user_id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: string
        roles:
          type: array
          items:
            type: string
      required:
      - access
      - email
      - refresh
      - roles
      - user_id
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TypeEnum:
      enum:
      - info
      - warning
      - success
      - error
      type: string
      description: |-
        * `info` - Info
        * `warning` - Warning
        * `success` - Success
        * `error` - Error
    User:
      type: object
      description: |-
        Full user serializer for create/retrieve/update operations.

        Notes:
            - `password` is write-only and validated via Django's password hashers on save.
            - `roles` is read-only (derived from the related roles for the user).
            - `id` is read-only.

        Create:
            Expects: email, username, first_name, last_name, password
            Behavior: sets hashed password before saving.

        Update:
            Optional: password. If provided, it is re-hashed and saved.

        Security:
            Do NOT echo plaintext passwords in logs or responses.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - roles
      - username
    UserMinimal:
      type: object
      description: |-
        Minimal user projection for lightweight references.

        Fields:
            id (int)
            email (str)
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
      - id
    UserRegistration:
      type: object
      description: |-
        Self-service registration serializer with role safeguards.

        Fields (write-only where applicable):
            email (str)
            username (str)
            password (str, write-only)
            password_confirmation (str, write-only)
            role_type (str, write-only, optional):
                Intended role name. Only staff/Admin may assign privileged roles.
                Non-privileged registrations fall back to `Roles.CUSTOMER`.

        Validation:
            - Ensures password == password_confirmation.
            - Applies Django's `validate_password` policy.

        Create:
            - Creates the user via `create_user` (ensuring proper hashing).
            - Sets `_pending_role` (lowercased) for assignment via a signal/handler.

        Security:
            - Never return password fields in responses.
            - Enforce server-side checks even if client omits `role_type`.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
        password_confirmation:
          type: string
          writeOnly: true
        role_type:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password_confirmation
      - username
    UserRole:
      type: object
      description: |-
        Serializer for the UserRole mapping model.

        Fields:
            id (int): Primary key of the mapping row.
            user (int): Foreign key to User (primary key value).
            role (Role): Nested role object.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        role:
          $ref: '#/components/schemas/Role'
      required:
      - id
      - role
      - user
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
