openapi: 3.0.3
info:
  title: Nexus-Commerce API
  version: 1.0.0
  description: E-commerce backend APIs for products, carts, orders, etc.
  contact:
    email: support@nexus-commerce.store
  license:
    name: BSD-3-Clause
security:
  - bearerAuth: []
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/auth/roles/:
    get:
      operationId: api_auth_roles_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleList'
          description: ''
    post:
      operationId: api_auth_roles_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
  /api/auth/roles/{id}/:
    get:
      operationId: api_auth_roles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    put:
      operationId: api_auth_roles_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    patch:
      operationId: api_auth_roles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    delete:
      operationId: api_auth_roles_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/token/refresh/:
    post:
      operationId: api_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/user-roles/:
    get:
      operationId: api_auth_user_roles_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: api_auth_user_roles_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/auth/user-roles/{id}/:
    get:
      operationId: api_auth_user_roles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: api_auth_user_roles_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    patch:
      operationId: api_auth_user_roles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: api_auth_user_roles_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/users/:
    get:
      operationId: api_auth_users_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_auth_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/auth/users/{id}/:
    get:
      operationId: api_auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/vendors/:
    get:
      operationId: api_auth_vendors_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/core/addresses/:
    get:
      operationId: api_core_addresses_list
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
    post:
      operationId: api_core_addresses_create
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/core/addresses/{id}/:
    get:
      operationId: api_core_addresses_retrieve
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    put:
      operationId: api_core_addresses_update
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    patch:
      operationId: api_core_addresses_partial_update
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    delete:
      operationId: api_core_addresses_destroy
      description: |-
        Users manage their own addresses.
        Optimizations:
          - owner-scoped queryset
          - select_related('user') for any reverse usage
          - small payloads via AddressSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/core/addresses/{id}/set_default/:
    post:
      operationId: api_core_addresses_set_default_create
      description: |-
        Atomically set this address as the default shipping address.
        Enforced also by DB partial unique constraint.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/core/audit-logs/:
    get:
      operationId: api_core_audit_logs_list
      description: |-
        Users: can only read their own logs.
        Admin/staff: can read all logs.
        Optimizations:
          - owner/admin-scoped queryset
          - select_related('user')
          - use lightweight list serializer
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogListList'
          description: ''
  /api/core/audit-logs/{id}/:
    get:
      operationId: api_core_audit_logs_retrieve
      description: |-
        Users: can only read their own logs.
        Admin/staff: can read all logs.
        Optimizations:
          - owner/admin-scoped queryset
          - select_related('user')
          - use lightweight list serializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogDetail'
          description: ''
  /api/notifications/notifications/:
    get:
      operationId: api_notifications_notifications_list
      description: |-
        Typical behavior:
        - Users list/read their own notifications
        - Users can mark as read (PATCH is_read=true)
        - No create/delete from API; server creates via business logic
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
  /api/notifications/notifications/{id}/:
    get:
      operationId: api_notifications_notifications_retrieve
      description: |-
        Typical behavior:
        - Users list/read their own notifications
        - Users can mark as read (PATCH is_read=true)
        - No create/delete from API; server creates via business logic
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: api_notifications_notifications_update
      description: |-
        Typical behavior:
        - Users list/read their own notifications
        - Users can mark as read (PATCH is_read=true)
        - No create/delete from API; server creates via business logic
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: api_notifications_notifications_partial_update
      description: |-
        Typical behavior:
        - Users list/read their own notifications
        - Users can mark as read (PATCH is_read=true)
        - No create/delete from API; server creates via business logic
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/orders/cart-items/:
    get:
      operationId: api_orders_cart_items_list
      description: Only allow interacting with your own cart items.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_orders_cart_items_create
      description: Only allow interacting with your own cart items.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
  /api/orders/cart-items/{id}/:
    get:
      operationId: api_orders_cart_items_retrieve
      description: Only allow interacting with your own cart items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    put:
      operationId: api_orders_cart_items_update
      description: Only allow interacting with your own cart items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    patch:
      operationId: api_orders_cart_items_partial_update
      description: Only allow interacting with your own cart items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    delete:
      operationId: api_orders_cart_items_destroy
      description: Only allow interacting with your own cart items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/carts/:
    get:
      operationId: api_orders_carts_list
      description: Only one cart per user. Auto-linked to the requesting user.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartList'
          description: ''
    post:
      operationId: api_orders_carts_create
      description: Only one cart per user. Auto-linked to the requesting user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
  /api/orders/carts/{id}/:
    get:
      operationId: api_orders_carts_retrieve
      description: Only one cart per user. Auto-linked to the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: api_orders_carts_update
      description: Only one cart per user. Auto-linked to the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: api_orders_carts_partial_update
      description: Only one cart per user. Auto-linked to the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: api_orders_carts_destroy
      description: Only one cart per user. Auto-linked to the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this cart.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/order-items/:
    get:
      operationId: api_orders_order_items_list
      description: Only the owner of the order can manage items.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemList'
          description: ''
    post:
      operationId: api_orders_order_items_create
      description: Only the owner of the order can manage items.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
  /api/orders/order-items/{id}/:
    get:
      operationId: api_orders_order_items_retrieve
      description: Only the owner of the order can manage items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    put:
      operationId: api_orders_order_items_update
      description: Only the owner of the order can manage items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    patch:
      operationId: api_orders_order_items_partial_update
      description: Only the owner of the order can manage items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    delete:
      operationId: api_orders_order_items_destroy
      description: Only the owner of the order can manage items.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/orders/:
    get:
      operationId: api_orders_orders_list
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: api_orders_orders_create
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
  /api/orders/orders/{id}/:
    get:
      operationId: api_orders_orders_retrieve
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: api_orders_orders_update
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: api_orders_orders_partial_update
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: api_orders_orders_destroy
      description: |-
        Customers can view and create their own orders.
        Admins and warehouse can update status.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/payments/Payment/:
    get:
      operationId: api_payments_Payment_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentList'
          description: ''
    post:
      operationId: api_payments_Payment_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
  /api/payments/Payment/{id}/:
    get:
      operationId: api_payments_Payment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    put:
      operationId: api_payments_Payment_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    patch:
      operationId: api_payments_Payment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    delete:
      operationId: api_payments_Payment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/payments/refunf/:
    get:
      operationId: api_payments_refunf_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRefundList'
          description: ''
    post:
      operationId: api_payments_refunf_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundCreate'
          description: ''
  /api/payments/refunf/{id}/:
    get:
      operationId: api_payments_refunf_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    put:
      operationId: api_payments_refunf_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refund'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Refund'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Refund'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    patch:
      operationId: api_payments_refunf_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRefund'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRefund'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRefund'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: ''
    delete:
      operationId: api_payments_refunf_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/categories/:
    get:
      operationId: api_products_categories_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: api_products_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/products/categories/{id}/:
    get:
      operationId: api_products_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: api_products_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: api_products_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: api_products_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/media/:
    get:
      operationId: api_products_media_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductMediaList'
          description: ''
    post:
      operationId: api_products_media_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
  /api/products/media/{id}/:
    get:
      operationId: api_products_media_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    put:
      operationId: api_products_media_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    patch:
      operationId: api_products_media_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductMedia'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    delete:
      operationId: api_products_media_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product media.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/products/:
    get:
      operationId: api_products_products_list
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: price__gte
        schema:
          type: number
      - in: query
        name: price__lte
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_products_products_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/products/{id}/:
    get:
      operationId: api_products_products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_products_products_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_products_products_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_products_products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/reviews/:
    get:
      operationId: api_products_reviews_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_products_reviews_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/products/reviews/{id}/:
    get:
      operationId: api_products_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: api_products_reviews_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: api_products_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: api_products_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product review.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/variants/:
    get:
      operationId: api_products_variants_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductVariantList'
          description: ''
    post:
      operationId: api_products_variants_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/products/variants/{id}/:
    get:
      operationId: api_products_variants_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    put:
      operationId: api_products_variants_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    patch:
      operationId: api_products_variants_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    delete:
      operationId: api_products_variants_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product variant.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        zip_code:
          type: string
          maxLength: 20
        is_default_shipping:
          type: boolean
      required:
      - city
      - country
      - id
      - state
      - street
      - zip_code
    AuditLogDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        action:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        details: {}
      required:
      - action
      - created_at
      - id
      - user
    AuditLogList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        action:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - created_at
      - id
      - user
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
      required:
      - created_at
      - id
      - items
      - updated_at
      - user
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
      required:
      - id
      - product_variant
      - quantity
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        parent:
          type: integer
          nullable: true
      required:
      - id
      - name
    CustomTokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    MediaTypeEnum:
      enum:
      - image
      - video
      type: string
      description: |-
        * `image` - Image
        * `video` - Video
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - message
      - type
      - user
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        shipping_address:
          type: string
          readOnly: true
        payment:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
      required:
      - created_at
      - id
      - items
      - payment
      - shipping_address
      - total_amount
      - updated_at
      - user
    OrderCreate:
      type: object
      properties:
        shipping_address:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - items
      - shipping_address
      - total_amount
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
        price_at_order:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - id
      - price_at_order
      - product_variant
      - quantity
    OrderItemCreate:
      type: object
      properties:
        product_variant:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - product_variant
      - quantity
    OrderStatusEnum:
      enum:
      - pending
      - processing
      - shipped
      - delivered
      type: string
      description: |-
        * `pending` - Pending
        * `processing` - Processing
        * `shipped` - Shipped
        * `delivered` - Delivered
    PaginatedAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    PaginatedAuditLogListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogList'
    PaginatedCartItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCartList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Cart'
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedOrderItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedPaymentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedProductMediaList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
    PaginatedProductReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedProductVariantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
    PaginatedRefundList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
    PaginatedRoleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedUserRoleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    PatchedAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        zip_code:
          type: string
          maxLength: 20
        is_default_shipping:
          type: boolean
    PatchedCart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
    PatchedCartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        parent:
          type: integer
          nullable: true
    PatchedNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        shipping_address:
          type: string
          readOnly: true
        payment:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
    PatchedOrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_variant:
          allOf:
          - $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        quantity:
          type: integer
          readOnly: true
        price_at_order:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
    PatchedPayment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        payment_method:
          type: string
          readOnly: true
        transaction_id:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sku:
          type: string
          maxLength: 100
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        category_id:
          type: integer
          writeOnly: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
          readOnly: true
        reviews:
          type: array
          items:
            type: integer
    PatchedProductMedia:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
        media_type:
          $ref: '#/components/schemas/MediaTypeEnum'
    PatchedProductReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        product:
          type: integer
        product_name:
          type: string
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProductVariant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        stock_quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_override:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        sku:
          type: string
          maxLength: 100
    PatchedRefund:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          readOnly: true
        password:
          type: string
          writeOnly: true
    PatchedUserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        role:
          $ref: '#/components/schemas/Role'
    Payment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        payment_method:
          type: string
          readOnly: true
        transaction_id:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - payment_method
      - refunds
      - status
      - transaction_id
      - updated_at
      - user
    PaymentStatusEnum:
      enum:
      - pending
      - success
      - failed
      - refunded
      type: string
      description: |-
        * `pending` - Pending
        * `success` - Success
        * `failed` - Failed
        * `refunded` - Refunded
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sku:
          type: string
          maxLength: 100
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        category_id:
          type: integer
          writeOnly: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
          readOnly: true
        reviews:
          type: array
          items:
            type: integer
      required:
      - category
      - category_id
      - created_at
      - description
      - id
      - media
      - name
      - price
      - reviews
      - sku
      - updated_at
      - variants
    ProductMedia:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
        media_type:
          $ref: '#/components/schemas/MediaTypeEnum'
      required:
      - id
      - media_type
      - url
    ProductReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        product:
          type: integer
        product_name:
          type: string
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - id
      - product
      - product_name
      - rating
      - user
      - user_email
    ProductVariant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        stock_quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_override:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        sku:
          type: string
          maxLength: 100
      required:
      - id
      - name
      - sku
      - stock_quantity
    Refund:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - payment
      - status
    RefundCreate:
      type: object
      properties:
        payment:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - amount
      - payment
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - id
      - name
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TypeEnum:
      enum:
      - info
      - warning
      - success
      - error
      type: string
      description: |-
        * `info` - Info
        * `warning` - Warning
        * `success` - Success
        * `error` - Error
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - roles
      - username
    UserMinimal:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
      - id
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
        password_confirmation:
          type: string
          writeOnly: true
        role_type:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password_confirmation
      - username
    UserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        role:
          $ref: '#/components/schemas/Role'
      required:
      - id
      - role
      - user
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
